name: Security & Code Quality

on:
  push:
    branches:
      - main
      - development
      - staging
      - 'Epic*'
  pull_request:
    branches:
      - main
      - development
      - staging
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  rust-security-audit:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/programs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo-audit
        id: cache-cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        if: steps.cache-cargo-audit.outputs.cache-hit != 'true'
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        run: cargo audit --json > audit-report.json || true

      - name: Check audit results
        run: |
          if [ -s audit-report.json ]; then
            echo "## 🔒 Rust Security Audit Results" >> $GITHUB_STEP_SUMMARY
            cat audit-report.json | jq -r '.vulnerabilities.list[] | "- **\(.advisory.id)**: \(.advisory.title) (Severity: \(.advisory.severity))"' >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: rust-security-audit
          path: packages/programs/audit-report.json
          retention-days: 30

  typescript-quality:
    name: TypeScript Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/programs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            packages/programs/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint || true

      - name: Check TypeScript types
        run: npx tsc --noEmit || true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified --json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  solana-verify:
    name: Solana Program Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    defaults:
      run:
        working-directory: ./packages/programs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79.0
          profile: minimal
          override: true

      - name: Build for verification
        run: |
          cargo build-sbf --manifest-path programs/slop-machine/Cargo.toml
          echo "✅ Program built for verification"

      - name: Generate build hash
        id: build-hash
        run: |
          HASH=$(sha256sum target/deploy/slop_machine.so | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "📦 Build hash: $HASH"

      - name: Create verification report
        run: |
          cat << EOF > verification-report.md
          # Solana Program Verification Report

          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}

          ## Build Information
          - **Program**: slop-machine
          - **Build Hash**: ${{ steps.build-hash.outputs.hash }}
          - **Rust Toolchain**: 1.79.0

          ## Verification Steps
          To verify this build independently:
          \`\`\`bash
          git clone ${{ github.repositoryUrl }}
          cd ${{ github.repository }}
          git checkout ${{ github.sha }}
          cd packages/programs
          cargo build-sbf --manifest-path programs/slop-machine/Cargo.toml
          sha256sum target/deploy/slop_machine.so
          \`\`\`

          Expected hash: \`${{ steps.build-hash.outputs.hash }}\`
          EOF

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: verification-report-${{ github.sha }}
          path: packages/programs/verification-report.md
          retention-days: 90

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        working-directory: ./packages/programs
        run: |
          echo "## 📜 License Compliance Report" >> $GITHUB_STEP_SUMMARY
          cargo license --json > licenses.json
          cat licenses.json | jq -r '.[] | "- **\(.name)** (\(.version)): \(.license)"' >> $GITHUB_STEP_SUMMARY

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: packages/programs/licenses.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [rust-security-audit, secret-scanning, codeql-analysis, solana-verify]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "# 🔒 Security & Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Rust Security Audit: ${{ needs.rust-security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Solana Verification: ${{ needs.solana-verify.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.rust-security-audit.result }}" = "failure" ] || \
             [ "${{ needs.secret-scanning.result }}" = "failure" ] || \
             [ "${{ needs.codeql-analysis.result }}" = "failure" ]; then
            echo "⚠️ **Security issues detected!** Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi
